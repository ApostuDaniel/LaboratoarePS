x = runif(1, -1, 1);
y = runif(1, -1, 1);
z = runif(1, -1, 1);
if((x*x + y*y + z*z) <= 1) N_C = N_C + 1;
}
return(8*N_C/N);
}
medium(20, 0.12, 10, 0.80, 100);
medium(20, 0.12, 10, 0.80, 100);
medium(20, 0.12, 10, 0.80, 100);
medium(20, 0.12, 10, 0.80, 100);
medium(20, 0.12, 10, 0.80, 100);
medium(20, 0.13, 10, 0.80, 100);
medium(20, 0.13, 10, 0.80, 100);
medium(20, 0.13, 10, 0.80, 100);
medium(20, 0.13, 10, 0.80, 100);
medium(20, 0.07, 10, 0.5, 100);
medium(20, 0.07, 10, 0.5, 100);
medium(20, 0.07, 10, 0.5, 100);
medium(20, 0.07, 10, 0.6, 100);
medium(20, 0.07, 10, 0.6, 100);
medium(20, 0.07, 10, 0.6, 100);
medium(20, 0.07, 10, 0.6, 100);
medium(20, 0.07, 10, 0.6, 100);
medium(20, 0.07, 10, 0.55, 100);
medium(20, 0.07, 10, 0.55, 100);
before10Days(n)
{
sum = 0;
for(i in 1:n)
{
m = medium(20, 0.07, 10, 0.55, 100);
if(m > 10) sum = sum + 1;
}
return (sum/n);
}
before10Days(100);
before10Days(n)
{
sum = 0;
for(i in 1:n)
{
m = medium(20, 0.07, 10, 0.55, 100);
if(m > 10) sum = sum + 1;
}
return (sum/n);
}
before10Days = function(n)
{
sum = 0;
for(i in 1:n)
{
m = medium(20, 0.07, 10, 0.55, 100);
if(m > 10) sum = sum + 1;
}
return (sum/n);
}
before10Days(100);
before10Days(10);
before10Days(10);
before10Days(100);
alfa = 1 - 0.95;
z = qnorm(alfa/2);
epsilon = 0.01;
p = 0.36      #value of before10Days when I tested it
n_min = p*(1-p)*(z/epsilon)^2;
before10Days(n_min + 1);
alfa = 1 - 0.95;
z = qnorm(alfa/2);
epsilon = 0.01;
p = 0.36      #value of before10Days when I tested it
n_min = p*(1-p)*(z/epsilon)^2;
n_min;
setwd("E:/R homework/lab3")
Nr_days = function() {
nr_days = 2;
last_errors = c(18, 22, 28);
nr_errors = 18;
while(nr_errors > 0) {
lambda = min(last_errors);
nr_errors = rpois(1, lambda);
last_errors = c(nr_errors, last_errors[1:2]) ;
nr_days = nr_days + 1;
}
return(nr_days);
}
Nr_days()
Nr_days()
Nr_days()
Nr_days()
Nr_days()
MC_nr_days_21 = function(N) {
s = 0;
for(i in 1:N) {
if(Nr_days() > 21)
s = s + 1;
}
return(s/N);
}
MC_nr_days_21(5000)
MC_nr_days_21(5000)
MC_nr_days_21(5000)
MC_nr_days_21(500000)
Nr_days()
MC_nr_days_21(5000)
alfa = 1 - 0.95
z = qnorm(alfa/2)
epsilon = 0.01
p = 0.346658
N_min = p*(1 - p)*(z/epsilon)^2
N_min
MC_nr_days_21(N_min + 1)
Nr_days()
MC_nr_days_21(5000)
alfa = 1 - 0.95
z = qnorm(alfa/2)
epsilon = 0.01
p = 0.346658
N_min = p*(1 - p)*(z/epsilon)^2
N_min
MC_nr_days_21(N_min + 1)
MC_nr_days_21(N_min + 1)
MC_nr_days_21(N_min + 1)
MC_nr_days_21(N_min + 1)
MC_nr_days_21(N_min + 1)
a_g = function(N)
{
k = 0;
for(i in 1:N)
{
x = rgeom(1, 0.3);
y = rgeom(1, 0.5);
if(x < y^2) k = k+1;
}
return(k/N);
}
a_g(5000)
a_g(5000)
a_g(5000)
a_g(5000)
a_g(50000)
a_g(50000)
a_g(50000)
a_g(50000)
a_g(50000)
a_g(50000)
alfa = 1 - 0.95
z = qnorm(alfa/2)
epsilon = 0.005
p = 0.29422
N_min = p*(1 - p)*(z/epsilon)^2
N_min
a_g(N_min + 1)
a_g(50000)
alfa = 1 - 0.95
z = qnorm(alfa/2)
epsilon = 0.005
p = 0.29422
N_min = p*(1 - p)*(z/epsilon)^2
N_min
a_g(N_min + 1)
a_g(50000)
alfa = 1 - 0.95
z = qnorm(alfa/2)
epsilon = 0.005
p = 0.29422
N_min = p*(1 - p)*(z/epsilon)^2
N_min
a_g(N_min + 1)
a_g(50000)
alfa = 1 - 0.95
z = qnorm(alfa/2)
epsilon = 0.005
p = 0.29422
N_min = p*(1 - p)*(z/epsilon)^2
N_min
a_g(N_min + 1)
a_g(50000)
alfa = 1 - 0.95
z = qnorm(alfa/2)
epsilon = 0.005
p = 0.29422
N_min = p*(1 - p)*(z/epsilon)^2
N_min
a_g(N_min + 1)
a_g(50000)
alfa = 1 - 0.95
z = qnorm(alfa/2)
epsilon = 0.005
p = 0.29422
N_min = p*(1 - p)*(z/epsilon)^2
N_min
a_g(N_min + 1)
sample(12,1)
sample(12,1)
sample(12,1)
sample(12,1)
sample(12,1)
sample(12,1)
sample(12,1)
sample(12,1)
sample(12,1)
sample(12,1)
sample(12,1)
sample(12,12)
x = c(2.1, 3.2, 2.3, 2.5, 3.1, 2.9, 2.6, 2.2, 3.3)
sample(x, 5)
x = c(2.1, 3.2, 2.3, 2.5, 3.1, 2.9, 2.6, 2.2, 3.3)
sample(x, 5)
x = c(2.1, 3.2, 2.3, 2.5, 3.1, 2.9, 2.6, 2.2, 3.3)
sample(x, 5)
x = c(2.1, 3.2, 2.3, 2.5, 3.1, 2.9, 2.6, 2.2, 3.3)
sample(x, 5)
x = c(2.1, 3.2, 2.3, 2.5, 3.1, 2.9, 2.6, 2.2, 3.3)
sample(x, 5)
x = c(2.1, 3.2, 2.3, 2.5, 3.1, 2.9, 2.6, 2.2, 3.3)
sample(x, 5)
x = c(2.1, 3.2, 2.3, 2.5, 3.1, 2.9, 2.6, 2.2, 3.3)
sample(x, 5)
x = c(1, 3, 1, 4, 12, 7)
M = matrix(x, 3, 2)# creates a matrix 3x2
N= matrix(x, 2, 3)# creates a matrix 2x3
M
N
matrix_product = function(A, B, C) {
n = nrow(A);
r = matrix( , nrow = n, ncol = 1);
x = matrix( , nrow = n, ncol = 1);
y = matrix( , nrow = n, ncol = 1);
r = sample(0:1, n, replace = TRUE);
for(i in 1:n) {# x = Br
x[i] = 0;
for(j in 1:nrow(B))
x[i] = (x[i]+ B[i,j]*r[j])%%2;
}
for(i in 1:nrow(B)) {# y = Ax = ABr
y[i] = 0;
for(j in 1:n)
y[i] = (y[i]+ A[i,j]*x[j])%%2;
}
for(i in 1:n) {# x = Cr
x[i] = 0;
for(j in 1:n)
x[i] = (x[i]+ C[i,j]*r[j])%%2;
}
for(i in 1:n) {# verify if ABr==Cr
if(y[i] !=x[i])
return(FALSE);
}
return(TRUE);
}
A = matrix(c(1, 11, 3, 4), 2, 2);
A
B = matrix(c(0,0,1,15), 2, 2);
B
B = matrix(c(0,1,1,15), 2, 2);
B
C = matrix(c(0,1,0,1), 2, 2)
C
matrix_product(A, B, C)
matrix_product(A, B, C)
matrix_product(A, B, C)
matrix_product(A, B, C)
matrix_product(A, B, C)
matrix_product(A, B, C)
matrix_product_reduce = function(A, B, C, k) {
for(i in 1:k){
if(!matrix_product(A, B, C))
return(FALSE);
}
}
return(TRUE);
matrix_product_reduce = function(A, B, C, k) {
for(i in 1:k){
if(!matrix_product(A, B, C))
return(FALSE);
}
return(TRUE);
}
matrix_product_reduce = function(A, B, C, k) {
for(i in 1:k){
if(!matrix_product(A, B, C))
return(FALSE);
}
return(TRUE);
}
matrix_product_reduce(A, B, C, 3)
matrix_product_reduce = function(A, B, C, k) {
for(i in 1:k){
if(!matrix_product(A, B, C))
return(FALSE);
}
return(TRUE);
}
matrix_product_reduce(A, B, C, 3)
setwd("E:/R homework/lab5")
assumption_testing(0.01, 250, 95, 0.4, 0)
assumption_testing(0.05, 250, 95, 0.4, 0)
assumption_testing = function(alfa, n, succeses, p0, testType)#testType = 1 => ipoteza asimetrica la dreapta
{                                                             #testType = -1 => ipoteza asimetrica la stinga
p_prim = succeses/n;                                         #testType = 0 => ipoteza simetrica
z_score = (p_prim - p0)/sqrt(p0*(1 - p0)/n)
if(testType == -1)
{
critical_z = qnorm(alfa, 0, 1)
return(z_score < critical_z)
}
else if(testType == 1)
{
critical_z = qnorm(1-alfa, 0, 1)
return(z_score > critical_z)
}
else if(testType == 0)
{
critical_z = qnorm(1-alfa/2, 0, 1)
return(abs(z_score) < abs(critical_z))
}
}
assumption_testing(0.01, 250, 95, 0.4, 0)
assumption_testing(0.05, 250, 95, 0.4, 0)
assumption_testing = function(alfa, n, succeses, p0, testType)#testType = 1 => ipoteza asimetrica la dreapta
{                                                             #testType = -1 => ipoteza asimetrica la stinga
p_prim = succeses/n;                                         #testType = 0 => ipoteza simetrica
z_score = (p_prim - p0)/sqrt(p0*(1 - p0)/n)
if(testType == -1)
{
critical_z = qnorm(alfa, 0, 1)
return(z_score < critical_z)
}
else if(testType == 1)
{
critical_z = qnorm(1-alfa, 0, 1)
return(z_score > critical_z)
}
else if(testType == 0)
{
critical_z = qnorm(1-alfa/2, 0, 1)
return(abs(z_score) < abs(critical_z))
}
}
assumption_testing(0.01, 100, 63, 0.6, 1)
assumption_testing(0.05, 150, 20, 0.1, 1)
setwd("E:/R homework/lab6")
test_Z(0.05, 810, 816, 20, 50)
test_Z = function(alfa, population_mean, sample_mean, n, sigma)
{
critical_z = qnorm(1- alfa)
z_score = (sample_mean - population_mean)/(sigma/sqrt(n))
critical_z
z_score
}
test_Z(0.05, 810, 816, 20, 50)
test_Z = function(alfa, population_mean, sample_mean, n, sigma)
{
critical_z = qnorm(1- alfa);
z_score = (sample_mean - population_mean)/(sigma/sqrt(n));
return(c(critical_z, z_score));
}
test_Z(0.05, 810, 816, 20, 50)
z_test = function(alfa, population_mean, sample_mean, n, sigma)
{
critical_z = qnorm(1 - alfa);
z_score = (sample_mean - population_mean)/(sigma/sqrt(n));
return(c(critical_z, z_score));
}
z_test = function(type, n, population_mean, sample_mean, alfa, sigma)
{
z_score = (sample_mean - population_mean)/(sigma/sqrt(n));
if(type == 1){
critical_z = qnorm(1 - alfa)
return(z_score > critical_z)
}
else if(type == -1){
critical_z = qnorm(alfa)
return(z_score < critical_z );
}
else {
critical_z = qnorm(1 - alfa/2)
return(abs(z_score) > abs(critical_z))
}
}
z_test = function(type, n, population_mean, sample_mean, alfa, sigma)
{
z_score = (sample_mean - population_mean)/(sigma/sqrt(n));
if(type == 1){
critical_z = qnorm(1 - alfa)
return(z_score > critical_z)
}
else if(type == -1){
critical_z = qnorm(alfa)
return(z_score < critical_z );
}
else {
critical_z = qnorm(1 - alfa/2)
return(abs(z_score) > abs(critical_z))
}
}
z_test(-1, 49, 90, 88, 0.05, 144^(1/2));
z_test(-1, 100, 21, 20.5, 0.01, 2.5)
t_test = function(type, n, population_mean, sample_mean, alfa, sd)
{
t_score = (sample_mean - population_mean)/(sd/sqrt(n));
if(type == 1){
critical_t = qt(1 - alfa, n-1)
return(t_score > critical_t)
}
else if(type == -1){
critical_t = qt(alfa, n-1)
return(t_score < critical_t );
}
else {
critical_t = qt(1 - alfa/2, n-1)
return(abs(t_score) > abs(critical_t))
}
}
t_test_data = function(x, type, population_mean, alfa)
{
return(t_test(type, length(x), population_mean, mean(x), alfa, sd(x)));
}
x = c(36, 32, 28, 33, 41, 28, 31, 26, 29, 34)
t_test_data(x, 0, 34, 0.01)
t_test_data(x , 0, 80, 0.01)
z_test_means = function(type, n1, n2, sample_mean1, sample_mean2 , alfa, sigma1, sigma2, m0)
{
combined_sigma = sqrt(sigma1^2/n1 + sigma2^2/n2);
z_score = (sample_mean1 - sample_mean2 - m0)/combined_sigma
if(type == 1){
critical_z = qnorm(1 - alfa)
return(z_score > critical_z)
}
else if(type == -1){
critical_z = qnorm(alfa)
return(z_score < critical_z );
}
else {
critical_z = qnorm(1 - alfa/2)
return(abs(z_score) > abs(critical_z))
}
}
z_test_means(0, 80, 70, 160, 155, 0.01, 3.24, 2.25, 0)
z_test(-1, 50, 30, 27, 0.01, 3.5)
z_test = function(type, n, population_mean, sample_mean, alfa, sigma)
{
z_score = (sample_mean - population_mean)/(sigma/sqrt(n));
if(type == 1){
critical_z = qnorm(1 - alfa)
return(z_score > critical_z)
}
else if(type == -1){
critical_z = qnorm(alfa)
return(z_score < critical_z );
}
else {
critical_z = qnorm(1 - alfa/2)
return(abs(z_score) > abs(critical_z))
}
}
z_test(-1, 50, 30, 27, 0.01, 3.5)
z_score = 2.05
alfa1 = 0.01;
critical_z1 = qnorm(1 - alfa1/2)
(abs(z_Score) > abs(critical_z1))
alfa2 = 0.05
critical_z2 = qnorm(1 - alfa2/2)
(abs(z_Score) > abs(critical_z2))
z_score = 2.05
alfa1 = 0.01;
alfa2 = 0.05
critical_z1 = qnorm(1 - alfa1/2)
critical_z2 = qnorm(1 - alfa2/2)
(abs(z_Score) > abs(critical_z1))
(abs(z_score) > abs(critical_z1))
(abs(z_score) > abs(critical_z2))
z_test_means(1, 224, 200, 8.1, 7.8, 0.01, 0.92, 1.15, 0)
z_test_means(1, 224, 200, 8.1, 7.8, 0.01, 0.92, 1.15, 0)#cu adevarat PhoneSkyGSM ofera servicii mai bune, pentru 1% si 5%.
z_test_means(1, 224, 200, 8.1, 7.8, 0.05, 0.92, 1.15, 0)
z_test_means(1, 50, 50, 102, 109, 0.01, 8.3, 7.5, 0)
n = 22
s1 = 2.15
s2 = 1.95
alfa = 0.01
F_score = s1^2/s2^2;
criticatl_F = qf(1-a, 22-1, 22-1);
F_score
critical_F
n = 22
s1 = 2.15
s2 = 1.95
alfa = 0.01
F_score = s1^2/s2^2;
critical_F = qf(1-a, 22-1, 22-1);
F_score
critical_F
critical_F = qf(1-a, 22-1, 22-1);
F_score
critical_F
n = 22
s1 = 2.15
s2 = 1.95
alfa = 0.01
F_score = s1^2/s2^2;
critical_F = qf(1-alfa, n-1, n-1);
F_score
critical_F
n = 22
s1 = 2.15
s2 = 1.95
alfa = 0.01
F_score = (s1^2)/(s2^2);
critical_F = qf(1-alfa, n-1, n-1);
F_score
critical_F
