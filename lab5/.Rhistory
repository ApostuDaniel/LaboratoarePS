{
n = length(S);
x = (n^3)^(1/4);
R = sample(S, trunc(x), replace = TRUE);
R = sort(R);
d = R[trunc(x/2 - n^(1/2))]
u = R[trunc(x/2 + n^(1/2))]
C = S[ S <= u & S >= d];
ld = length(S[S < d]);
lu = length(S[S > u]);
if(ld > n/2 || lu > n/2 || length(C) > 4 * trunc(x))
return("no median found");
C = sort(C)
return(C[trunc(n/2) - ld + 1])
}
S = sample(1:200, 51)
randMedian(S)
median(S)
randMedian = function(S)
{
n = length(S);
x = (n^3)^(1/4);
R = sample(S, trunc(x), replace = TRUE);
R = sort(R);
d = R[trunc(x/2 - n^(1/2))]
u = R[trunc(x/2 + n^(1/2))]
C = S[ S <= u & S >= d];
ld = length(S[S < d]);
lu = length(S[S > u]);
if(ld > n/2 || lu > n/2 || length(C) > 4 * trunc(x))
return("no median found");
C = sort(C)
return(C[trunc(n/2) - ld + 1])
}
S = sample(1:200, 51)
randMedian(S)
median(S)
polinomValue = function(f, p)
{
sum = 0;
for(i in 1:length(f))
sum = sum + f[i] * p^(i-1);
return(sum);
}
polinomEquality = function(f, g, h)
{
n = length(f);
p = sample(1:n*3, 1);
if(polinomValue(f, p) * polinomValue(g, p) == polinomValue(h, p))
return(TRUE);
else
return(FALSE);
}
polinomValue = function(f, p)
{
sum = 0;
for(i in 1:length(f))
sum = sum + f[i] * p^(i-1);
return(sum);
}
polinomEquality = function(f, g, h)
{
n = length(f);
p = sample(1:n*3, 1);
if(polinomValue(f, p) * polinomValue(g, p) == polinomValue(h, p))
return(TRUE);
return(FALSE);
}
f = c(1, 1, 2);
g = c(3, 5, 1);
h = c(3, 8, 22, 11, 2);
polinomEquality(f, g, h)
f = c(1, 1, 2);
g = c(3, 5, 1);
h = c(3, 8, 22, 11, 2);
polinomEquality(f, g, h)
f = c(1, 1, 2);
g = c(3, 5, 1);
h = c(3, 8, 22, 11, 2);
polinomEquality(f, g, h)
f = c(1, 1, 2);
g = c(3, 5, 1);
h = c(3, 8, 22, 11, 2);
polinomEquality(f, g, h)
f = c(1, 1, 2);
g = c(3, 5, 1);
h = c(3, 8, 22, 11, 2);
polinomEquality(f, g, h)
polinomEquality = function(f, g, h)
{
n = length(f);
p = sample(1:n*3, 1);
if(polinomValue(f, p) * polinomValue(g, p) == polinomValue(h, p))
return(TRUE);
else
return(FALSE);
}
f = c(1, 1, 2);
g = c(3, 5, 1);
h = c(3, 8, 22, 11, 2);
polinomEquality(f, g, h)
polinomEquality = function(f, g, h)
{
n = length(f);
p = sample(1:n*3, 1);
if(polinomValue(f, p) * polinomValue(g, p) == polinomValue(h, p))
{return(TRUE);}
else
{ return(FALSE);}
}
f = c(1, 1, 2);
g = c(3, 5, 1);
h = c(3, 8, 22, 11, 2);
polinomEquality(f, g, h)
f = c(1, 1, 2);
g = c(3, 5, 1);
h = c(3, 8, 12, 11, 2);
polinomEquality(f, g, h)
f = c(1, 1, 2);
g = c(3, 5, 1);
h = c(3, 8, 12, 11, 2);
polinomEquality(f, g, h)
f = c(1, 1, 2);
g = c(3, 5, 1);
h = c(3, 8, 12, 11, 2);
polinomEquality(f, g, h)
repeats = log(0.0001, 2/3)
result
repeats = log(0.0001, 2/3)
repeats
find_r_and_p = function(n)
{
values = c(-1, -1);
if(n <=1 ) return(c(-1, -1))
for(r in 1:n)
{
p = (n-1)/2^r
if(p == trunc(p) && p%%2 == 1)
{
return(c(p, r));
}
}
}
find_r_and_p = function(n)
{
values = c(-1, -1);
if(n <=1 ) return(c(-1, -1))
for(r in 1:log(n-1,2))
{
p = (n-1)/2^r
if(p == trunc(p) && p%%2 == 1)
{
return(c(p, r));
}
}
}
randIsPrime = function(n)
{
values = find_r_and_p(n);
p = values[1];
r = values[2];
a = sample(1:n-1, 1);
y = a^p%%n
for(i in 1:r)
{
if(y^2%%n == 1 && y != 1 && y != n-1)
return(FALSE)
y = y^2%%n
}
if(y != 1) return(FALSE)
else return(TRUE)
}
randIsPrime = function(n)
{
values = find_r_and_p(n);
if(values[1] == -1)
return(FALSE)
p = values[1];
r = values[2];
a = sample(1:n-1, 1);
y = a^p%%n
for(i in 1:r)
{
if(y^2%%n == 1 && y != 1 && y != n-1)
return(FALSE)
y = y^2%%n
}
if(y != 1) return(FALSE)
else return(TRUE)
}
randIsPrime(17)
randIsPrime = function(n)
{
values = find_r_and_p(n);
if(values[1] == -1)
return(FALSE)
p = values[1];
r = values[2];
a = sample(1:n-1, 1);
y = a^p%%n
for(i in 1:r)
{
if(y^2%%n == 1 && y != 1 && y != n-1)
return(FALSE)
y = y^2%%n
}
if(y != 1) return(FALSE)
else return(TRUE)
}
randIsPrime(17)
randIsPrime = function(n)
{
values = find_r_and_p(n);
if(values[1] == -1)
return(FALSE)
p = values[1];
r = values[2];
a = sample(1:n-1, 1);
y = a^p%%n
for(i in 1:r)
{
if(y^2%%n == 1 && y != 1 && y != n-1)
return(FALSE)
y = y^2%%n
}
if(y != 1) return(FALSE)
else return(TRUE)
}
randIsPrime(17)
randIsPrime = function(n)
{
values = find_r_and_p(n);
if(values[1] == -1)
return(FALSE)
p = values[1];
r = values[2];
a = sample(1:n-1, 1);
y = a^p%%n
for(i in 1:r)
{
if(y^2%%n == 1 && y != 1 && y != n-1)
return(FALSE)
y = y^2%%n
}
if(y != 1) return(FALSE)
else return(TRUE)
}
randIsPrime(17)
randIsPrime = function(n)
{
values = find_r_and_p(n);
if(values[1] == -1)
return(FALSE)
p = values[1];
r = values[2];
a = sample(1:n-1, 1);
y = a^p%%n
for(i in 1:r)
{
if(y^2%%n == 1 && y != 1 && y != n-1)
return(FALSE)
y = y^2%%n
}
if(y != 1) return(FALSE)
else return(TRUE)
}
randIsPrime(17)
randIsPrime(18)
randIsPrime(18)
find_r_and_p = function(n)
{
if(n <=1 ) return(c(-1, -1))
for(r in 1:log(n-1,2))
{
p = (n-1)/2^r
if(p == trunc(p) && p%%2 == 1)
{
return(c(p, r));
}
}
return(c(-1, -1))
}
randIsPrime = function(n)
{
values = find_r_and_p(n);
if(values[1] == -1)
return(FALSE)
p = values[1];
r = values[2];
a = sample(1:n-1, 1);
y = a^p%%n
for(i in 1:r)
{
if(y^2%%n == 1 && y != 1 && y != n-1)
return(FALSE)
y = y^2%%n
}
if(y != 1) return(FALSE)
else return(TRUE)
}
randIsPrime(18)
find_r_and_p = function(n)
{
if(n <=1 ) return(c(-1, -1))
for(r in 1:log(n-1,2))
{
p = (n-1)/2^r
if(p == trunc(p) && p%%2 == 1)
{
return(c(p, r));
}
}
return(c(-1, -1))
}
randIsPrime = function(n)
{
values = find_r_and_p(n);
if(values[1] == -1)
return(FALSE)
p = values[1];
r = values[2];
a = sample(1:n-1, 1);
y = a^p%%n
for(i in 1:r)
{
if(y^2%%n == 1 && y != 1 && y != n-1)
return(FALSE)
y = y^2%%n
}
if(y != 1) return(FALSE)
else return(TRUE)
}
randIsPrime(18)
randIsPrime(21)
randIsPrime(21)
randIsPrime(21)
randIsPrime(21)
randIsPrime(21)
randIsPrime = function(n)
{
values = find_r_and_p(n);
if(values[1] == -1)
return(FALSE)
p = values[1];
r = values[2];
a = sample(1:n-1, 1);
y = a^p%%n
for(i in 1:r)
{
if(y^2%%n == 1 && y != 1 && y != n-1)
return(FALSE)
y = y^2%%n
}
if(y != 1) return(FALSE)
else return(TRUE)
}
randIsPrime(17)
randIsPrime = function(n)
{
values = find_r_and_p(n);
if(values[1] == -1)
return(FALSE)
p = values[1];
r = values[2];
a = sample(1:n-1, 1);
y = a^p%%n
for(i in 1:r)
{
if(y^2%%n == 1 && y != 1 && y != n-1)
return(FALSE)
y = y^2%%n
}
if(y != 1) return(FALSE)
else return(TRUE)
}
randIsPrime(17)
setwd("E:/R homework/lab5")
estimator_cu_deviatie=function(alfa, sample_mean, n, s )
{
se = s/sqrt(n)
critical_t = qt(1 - alfa/2, n - 1)
a = sample_mean - critical_t*se
b = sample_mean + critical_t*se
return(c(a, b, b-a))
}
estimator_cu_dispersie = function(alfa, mean, n,  sigmap)
{
sigma = sqrt(sigmap);
critical_z = qnorm(1 - alfa/2, 0, 1)
a = mean - critical_z*sigma/sqrt(n)
b = mean + critical_z*sigma/sqrt(n)
return(c(a, b, b-a))
}
#D.1
estimator_cu_deviatie(0.05, 490, 150, 85)
estimator_cu_deviatie=function(alfa, sample_mean, n, s )
{
se = s/sqrt(n)
critical_t = qt(1 - alfa/2, n - 1)
a = sample_mean - critical_t*se
b = sample_mean + critical_t*se
return(c(a, b))
}
estimator_cu_dispersie = function(alfa, mean, n,  sigmap)
{
sigma = sqrt(sigmap);
critical_z = qnorm(1 - alfa/2, 0, 1)
a = mean - critical_z*sigma/sqrt(n)
b = mean + critical_z*sigma/sqrt(n)
return(c(a, b))
}
#D.1
estimator_cu_deviatie(0.05, 490, 150, 85)
estimator_cu_deviatie(0.01, 101.5, 25, 5)
assumption_testing = function(alfa, n, succeses, p0, testType)#testType = 1 => ipoteza asimetrica la dreapta
{                                                             #testType = -1 => ipoteza asimetrica la stinga
p_prim = succese/n;                                         #testType = 0 => ipoteza simetrica
z_score = (p_prim - p0)/sqrt(p0(1 - p0)/n)
if(testType == -1)
{
critical_z = qnorm(alfa, 0, 1)
return(z_score < critical_z)
}
else if(testType == 1)
{
critical_z = qnorm(1-alfa, 0, 1)
return(z_score > critical_z)
}
else if(testType == 0)
{
critical_z = qnorm(1-alfa/2, 0, 1)
return(abs(z_score) > abs(critical_z))
}
}
assumption_testing(0.01, 1179, 0.085* 1179, 0.08, 1)
assumption_testing(0.05, 1179, 0.085* 1179, 0.08, 1)
assumption_testing(0.01, 1179, 0.085* 1179, 0.08, 1)
assumption_testing(0.05, 1179, 0.085* 1179, 0.08, 1)
assumption_testing = function(alfa, n, succeses, p0, testType)#testType = 1 => ipoteza asimetrica la dreapta
{                                                             #testType = -1 => ipoteza asimetrica la stinga
p_prim = succeses/n;                                         #testType = 0 => ipoteza simetrica
z_score = (p_prim - p0)/sqrt(p0(1 - p0)/n)
if(testType == -1)
{
critical_z = qnorm(alfa, 0, 1)
return(z_score < critical_z)
}
else if(testType == 1)
{
critical_z = qnorm(1-alfa, 0, 1)
return(z_score > critical_z)
}
else if(testType == 0)
{
critical_z = qnorm(1-alfa/2, 0, 1)
return(abs(z_score) > abs(critical_z))
}
}
assumption_testing(0.01, 1179, 0.085* 1179, 0.08, 1)
assumption_testing(0.05, 1179, 0.085* 1179, 0.08, 1)
assumption_testing = function(alfa, n, succeses, p0, testType)#testType = 1 => ipoteza asimetrica la dreapta
{                                                             #testType = -1 => ipoteza asimetrica la stinga
p_prim = succeses/n;                                         #testType = 0 => ipoteza simetrica
z_score = (p_prim - p0)/sqrt(p0*(1 - p0)/n)
if(testType == -1)
{
critical_z = qnorm(alfa, 0, 1)
return(z_score < critical_z)
}
else if(testType == 1)
{
critical_z = qnorm(1-alfa, 0, 1)
return(z_score > critical_z)
}
else if(testType == 0)
{
critical_z = qnorm(1-alfa/2, 0, 1)
return(abs(z_score) > abs(critical_z))
}
}
assumption_testing(0.01, 1179, 0.085* 1179, 0.08, 1)
assumption_testing(0.05, 1179, 0.085* 1179, 0.08, 1)
assumption_testing(0.01, 1179, 0.085* 1179, 0.08, 1)
assumption_testing(0.5, 1179, 0.085* 1179, 0.08, 1)
assumption_testing(0.01, 125, 24, 0.171, 1)
assumption_testing(0.05, 125, 24, 0.171, 1)
assumption_testing(0.01, 250, 95, 0.4, 0)
assumption_testing(0.05, 250, 95, 0.4, 0)
assumption_testing(0.01, 250, 95, 0.4, 0)
assumption_testing(0.05, 250, 95, 0.4, 0)
assumption_testing = function(alfa, n, succeses, p0, testType)#testType = 1 => ipoteza asimetrica la dreapta
{                                                             #testType = -1 => ipoteza asimetrica la stinga
p_prim = succeses/n;                                         #testType = 0 => ipoteza simetrica
z_score = (p_prim - p0)/sqrt(p0*(1 - p0)/n)
if(testType == -1)
{
critical_z = qnorm(alfa, 0, 1)
return(z_score < critical_z)
}
else if(testType == 1)
{
critical_z = qnorm(1-alfa, 0, 1)
return(z_score > critical_z)
}
else if(testType == 0)
{
critical_z = qnorm(1-alfa/2, 0, 1)
return(abs(z_score) != abs(critical_z))
}
}
assumption_testing(0.01, 250, 95, 0.4, 0)
assumption_testing(0.05, 250, 95, 0.4, 0)
