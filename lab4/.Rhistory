i = 1;
while(length(UnusedRows) > 0 && i <= n)
{
r =  sample(UnusedRows,1);
row[i] = r;
i = i+1;
if (i == n+1) break;
UnusedRows = UnusedRows[UnusedRows != row[i-1]]
for(j in 1:length(row))
{
high = row[j] + (i - j);
low = row[j] - (i - j);
if(high >=1 && high <=n)
UnusedRows = UnusedRows[UnusedRows != high];
if(low >=1 && low <=n)
UnusedRows = UnusedRows[UnusedRows != low];
}
}
if(length(UnusedRows) = 0 && i < n) return("Fail")
else return(row);
}
n_queens = function(n)
{
UnusedRows = c(1:n);
row = rep(0, n);
i = 1;
while(length(UnusedRows) > 0 && i <= n)
{
r =  sample(UnusedRows,1);
row[i] = r;
i = i+1;
if (i == n+1) break;
UnusedRows = UnusedRows[UnusedRows != row[i-1]]
for(j in 1:length(row))
{
high = row[j] + (i - j);
low = row[j] - (i - j);
if(high >=1 && high <=n)
UnusedRows = UnusedRows[UnusedRows != high];
if(low >=1 && low <=n)
UnusedRows = UnusedRows[UnusedRows != low];
}
}
if(length(UnusedRows) == 0 && i < n) return("Fail")
else return(row);
}
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
x = "Fail"
while(TRUE)
{
x = n_queens(8);
if(x != "Fail")
{
print(x);
break;
}
}
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n_queens(8)
n = 5;
nthroot(n^3, 4)
trunc(nthroot(n^3, 4))
n = 5;
(n^3)^(1/4)
n = 5;
x =(n^3)^(1/4)
trunc(x)
randMedian = function(S)
{
n = length(S);
x = (n^3)^(1/4);
R = sample(S, trunc(x), replace = TRUE);
sort(R);
d = R[trunc(x/2 - sqrt(n))]
u = R[trunc(x/2 + sqrt(n))]
C = S[ S <= u && S >= d];
ld = length(S[S < d]);
lu = length(S[S > u]);
if(ld > n/2 || lu > n/2 || length(C) > 4 * trunc(x))
return("no median found");
sort(C)
return(C[trunc(n/2) - ld + 1])
}
S = c(1:10)
randMedian(S)
randMedian = function(S)
{
n = length(S);
x = (n^3)^(1/4);
R = sample(S, trunc(x), replace = TRUE);
sort(R);
d = R[trunc(x/2 - sqrt(n))]
u = R[trunc(x/2 + sqrt(n))]
C = S[ S <= u && S >= d];
ld = length(S[S < d]);
lu = length(S[S > u]);
if(ld > n/2 || lu > n/2 || length(C) > 4 * trunc(x))
return("no median found");
sort(C)
return(C[trunc(n/2) - ld + 1])
}
S = sample(1:40, 10)
randMedian(S)
randMedian = function(S)
{
n = length(S);
x = (n^3)^(1/4);
R = sample(S, trunc(x), replace = TRUE);
sort(R);
d = R[trunc(x/2 - sqrt(n))]
u = R[trunc(x/2 + sqrt(n))]
C = S[ S <= u && S >= d];
ld = length(S[S < d]);
lu = length(S[S > u]);
if(ld > n/2 || lu > n/2 || length(C) > 4 * trunc(x))
return("no median found");
sort(C)
return(C[trunc(n/2) - ld + 1])
}
S = sample(1:40, 10)
randMedian(S)
randMedian = function(S)
{
n = length(S);
x = (n^3)^(1/4);
R = sample(S, trunc(x), replace = TRUE);
sort(R);
d = R[trunc(x/2 - sqrt(n))]
u = R[trunc(x/2 + sqrt(n))]
C = S[ S <= u && S >= d];
ld = length(S[S < d]);
lu = length(S[S > u]);
if(ld > n/2 || lu > n/2 || length(C) > 4 * trunc(x))
return("no median found");
sort(C)
return(C[trunc(n/2) - ld + 1])
}
S = sample(1:40, 10)
randMedian(S)
randMedian = function(S)
{
n = length(S);
x = (n^3)^(1/4);
R = sample(S, trunc(x), replace = TRUE);
sort(R);
d = R[trunc(x/2 - sqrt(n))]
u = R[trunc(x/2 + sqrt(n))]
C = S[ S <= u && S >= d];
ld = length(S[S < d]);
lu = length(S[S > u]);
if(ld > n/2 || lu > n/2 || length(C) > 4 * trunc(x))
return("no median found");
sort(C)
return(C[trunc(n/2) - ld + 1])
}
S = sample(1:40, 10)
randMedian(S)
randMedian = function(S)
{
n = length(S);
x = (n^3)^(1/4);
R = sample(S, trunc(x), replace = TRUE);
sort(R);
d = R[trunc(x/2 - sqrt(n))]
u = R[trunc(x/2 + sqrt(n))]
C = S[ S <= u && S >= d];
ld = length(S[S < d]);
lu = length(S[S > u]);
if(ld > n/2 || lu > n/2 || length(C) > 4 * trunc(x))
return("no median found");
sort(C)
return(C[trunc(n/2) - ld + 1])
}
S = sample(1:40, 10)
randMedian(S)
S = sample(1:40, 10)
randMedian(S)
S = sample(1:40, 10)
randMedian(S)
S = sample(1:40, 10)
randMedian(S)
S = sample(1:40, 10)
randMedian(S)
S = sample(1:40, 10)
randMedian(S)
S = sample(1:40, 10)
randMedian(S)
S = sample(1:40, 10)
randMedian(S)
S = sample(1:40, 10)
randMedian(S)
S = sample(1:40, 10)
randMedian(S)
S = sample(1:40, 10)
randMedian(S)
S = sample(1:40, 10)
randMedian(S)
S = sample(1:40, 10)
randMedian(S)
S = sample(1:40, 10)
randMedian(S)
S = sample(1:40, 10)
randMedian(S)
S = sample(1:40, 10)
randMedian(S)
S = sample(1:40, 10)
randMedian(S)
S = sample(1:40, 10)
randMedian(S)
S = sample(1:40, 10)
randMedian(S)
S = sample(1:40, 10)
randMedian(S)
S = sample(1:40, 10)
randMedian(S)
S = sample(1:40, 10)
randMedian(S)
S = sample(1:40, 10)
sort(S)
S
randMedian(S)
randMedian = function(S)
{
n = length(S);
x = (n^3)^(1/4);
R = sample(S, trunc(x), replace = TRUE);
R = sort(R);
d = R[trunc(x/2 - sqrt(n))]
u = R[trunc(x/2 + sqrt(n))]
C = S[ S <= u & S >= d];
ld = length(S[S < d]);
lu = length(S[S > u]);
if(ld > n/2 || lu > n/2 || length(C) > 4 * trunc(x))
return("no median found");
C = sort(C)
return(C[trunc(n/2) - ld + 1])
}
S = sample(1:40, 10)
sort(S)
randMedian(S)
randMedian = function(S)
{
n = length(S);
x = (n^3)^(1/4);
R = sample(S, trunc(x), replace = TRUE);
R = sort(R);
d = R[trunc(x/2 - sqrt(n))]
u = R[trunc(x/2 + sqrt(n))]
C = S[ S <= u & S >= d];
ld = length(S[S < d]);
lu = length(S[S > u]);
if(ld > n/2 || lu > n/2 || length(C) > 4 * trunc(x))
return("no median found");
C = sort(C)
return(C[trunc(n/2) - ld + 1])
}
S = sample(1:40, 10)
sort(S)
randMedian(S)
randMedian = function(S)
{
n = length(S);
x = (n^3)^(1/4);
R = sample(S, trunc(x), replace = TRUE);
R = sort(R);
d = R[trunc(x/2 - sqrt(n))]
u = R[trunc(x/2 + sqrt(n))]
C = S[ S <= u & S >= d];
ld = length(S[S < d]);
lu = length(S[S > u]);
if(ld > n/2 || lu > n/2 || length(C) > 4 * trunc(x))
return("no median found");
C = sort(C)
return(C[trunc(n/2) - ld + 1])
}
S = sample(1:40, 10)
sort(S)
randMedian(S)
randMedian = function(S)
{
n = length(S);
x = (n^3)^(1/4);
R = sample(S, trunc(x), replace = TRUE);
R = sort(R);
d = R[trunc(x/2 - sqrt(n))]
u = R[trunc(x/2 + sqrt(n))]
C = S[ S <= u & S >= d];
ld = length(S[S < d]);
lu = length(S[S > u]);
if(ld > n/2 || lu > n/2 || length(C) > 4 * trunc(x))
return("no median found");
C = sort(C)
return(C[trunc(n/2) - ld + 1])
}
S = sample(1:40, 10)
sort(S)
randMedian(S)
randMedian = function(S)
{
n = length(S);
x = (n^3)^(1/4);
R = sample(S, trunc(x), replace = TRUE);
R = sort(R);
d = R[trunc(x/2 - sqrt(n))]
u = R[trunc(x/2 + sqrt(n))]
C = S[ S <= u & S >= d];
ld = length(S[S < d]);
lu = length(S[S > u]);
if(ld > n/2 || lu > n/2 || length(C) > 4 * trunc(x))
return("no median found");
C = sort(C)
return(C[trunc(n/2) - ld + 1])
}
S = sample(1:40, 10)
sort(S)
randMedian(S)
randMedian = function(S)
{
n = length(S);
x = (n^3)^(1/4);
R = sample(S, trunc(x), replace = TRUE);
R = sort(R);
d = R[trunc(x/2 - sqrt(n))]
u = R[trunc(x/2 + sqrt(n))]
C = S[ S <= u & S >= d];
ld = length(S[S < d]);
lu = length(S[S > u]);
if(ld > n/2 || lu > n/2 || length(C) > 4 * trunc(x))
return("no median found");
C = sort(C)
return(C[trunc(n/2) - ld + 1])
}
S = sample(1:40, 10)
sort(S)
randMedian(S)
randMedian = function(S)
{
n = length(S);
x = (n^3)^(1/4);
print(x);
R = sample(S, trunc(x), replace = TRUE);
R = sort(R);
print(R)
d = R[trunc(x/2 - sqrt(n))]
print(d)
u = R[trunc(x/2 + sqrt(n))]
print(u)
C = S[ S <= u & S >= d];
print(C)
ld = length(S[S < d]);
lu = length(S[S > u]);
print(ld)
print(lu)
if(ld > n/2 || lu > n/2 || length(C) > 4 * trunc(x))
return("no median found");
C = sort(C)
print(C)
return(C[trunc(n/2) - ld + 1])
}
S = sample(1:40, 10)
randMedian(S)
randMedian = function(S)
{
n = length(S);
x = (n^3)^(1/4);
print(x);
R = sample(S, trunc(x), replace = TRUE);
R = sort(R);
print(R)
d = R[trunc(x/2 - n^(1/2))]
print(d)
u = R[trunc(x/2 + n^(1/2))]
print(u)
C = S[ S <= u & S >= d];
print(C)
ld = length(S[S < d]);
lu = length(S[S > u]);
print(ld)
print(lu)
if(ld > n/2 || lu > n/2 || length(C) > 4 * trunc(x))
return("no median found");
C = sort(C)
print(C)
return(C[trunc(n/2) - ld + 1])
}
S = sample(1:40, 10)
randMedian(S)
randMedian = function(S)
{
n = length(S);
x = (n^3)^(1/4);
print(x);
R = sample(S, trunc(x), replace = TRUE);
R = sort(R);
print(R)
d = R[trunc(x/2 - n^(1/2))]
print(trunc(x/2 - n^(1/2)))
print(d)
u = R[trunc(x/2 + n^(1/2))]
print(trunc(x/2 + n^(1/2)))
print(u)
C = S[ S <= u & S >= d];
print(C)
ld = length(S[S < d]);
lu = length(S[S > u]);
print(ld)
print(lu)
if(ld > n/2 || lu > n/2 || length(C) > 4 * trunc(x))
return("no median found");
C = sort(C)
print(C)
return(C[trunc(n/2) - ld + 1])
}
S = sample(1:40, 10)
randMedian(S)
View(MC_integration2)
randMedian = function(S)
{
n = length(S);
x = (n^3)^(1/4);
print(x);
R = sample(S, trunc(x), replace = TRUE);
R = sort(R);
print(R)
d = R[trunc(x/2 - n^(1/2))]
print(trunc(x/2 - n^(1/2)))
print(d)
u = R[trunc(x/2 + n^(1/2))]
print(trunc(x/2 + n^(1/2)))
print(u)
C = S[ S <= u & S >= d];
print(C)
ld = length(S[S < d]);
lu = length(S[S > u]);
print(ld)
print(lu)
if(ld > n/2 || lu > n/2 || length(C) > 4 * trunc(x))
return("no median found");
C = sort(C)
print(C)
return(C[trunc(n/2) - ld + 1])
}
S = sample(1:40, 12)
randMedian(S)
